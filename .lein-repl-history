(code-critic (1 + 1) (+ 1 1))
(code-critic (1 + 1))
(code-critic (1 + 1) (1 + 1))
(load-file "test/simple/polynomial.clj")
(code-critic (1 + 1) (1 + 1))
(code-critic (1 + 1))
(code-critic {:good (+ 1 1) :bad (1 + 1)})
(load-file "test/simple/polynomial.clj")
(code-critic (+ 1 1) (1 + 1))
(load-file "test/simple/polynomial.clj")
(code-critic (+ 1 1) (1 + 1))
(load-file "test/simple/macro1.clj")
(code-critic (+ 1 1) (1 + 1))
(load-file "test/simple/macro1.clj")
(code-critic (+ 1 1) (1 + 1))
(load-file "test/simple/macro1.clj")
(code-critic (+ 1 1) (1 + 1))
(load-file "test/simple/macro1.clj")
(code-critic (+ 1 1) (1 + 1))
(load-file "test/simple/macro1.clj")
(code-critic (+ 1 1) (1 + 1))
(load-file "test/simple/macro1.clj")
(code-critic (+ 1 1) (1 + 1))
(load-file "test/simple/macro1.clj")
(code-critic (+ 1 1) (1 + 1))
(code-critic (+ 1 1) (* 1 3))
(load-file "test/simple/macro1.clj")
(code-critic (+ 1 1) (* 1 3))
(load-file "test/simple/macro1.clj")
(code-critic (+ 1 1) (* 1 3))
(load-file "test/simple/macro1.clj")
(code-critic (+ 1 1) (* 1 3))
(load-file "test/simple/macro1.clj")
(code-critic (+ 1 1) (* 1 3))
(load-file "test/simple/macro1.clj")
(code-critic (+ 1 1) (* 1 3))
(load-file "test/simple/macro1.clj")
(preval (+ 1 1) (* 1 3))
(load-file "test/simple/macro1.clj")
(preval (+ 1 1) (* 1 3))
(load-file "test/simple/macro1.clj")
(preval (+ 1 1) (* 1 3))
(load-file "test/simple/macro1.clj")
(preval (+ 1 1) (* 1 3))
(load-file "test/simple/macro1.clj")
(macroexpand [(+ 1 1)])
(macroexpand (+ 1 1))
(macroexpand (evaluate (+ 1 1)))
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
~@:a
~@
~@(+ 1)
~(+ 1)
`(+ 1)
'(+ 1)
`(+ 1)
~(`(+ 1))
~@(`(+ 1))
~@('(+ 1))
~('(+ 1))
~ '(+ 1)
'(+ 1)
~ '(+ 1)
(~'(+ 1))
(~ '(+ 1))
unquote
(unquote 1)
(unquote '1)
 ~(str 1 2 3)
`(~(str 1 2 3))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
g d
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(map evaluate [])
(map and [])
(load-file "test/simple/macro1.clj")
(test-library-facts)
(load-file "test/simple/macro1.clj")
(test-library-facts)
(load-file "test/simple/macro1.clj")
(test-library-facts)
(load-file "test/simple/macro1.clj")
(test-library-facts)
(load-file "test/simple/macro1.clj")
(test-library-facts)
(load-file "test/simple/macro1.clj")
(test-library-facts)
(load-file "test/simple/macro1.clj")
(macroexpand (all-truthy? (= 1 2)))
(load-file "test/simple/macro1.clj")
(macroexpand (all-truthy? (= 1 2)))
(macroexpand (and 0 1)))
(macroexpand (and 0 1))
(macroexpand '(and 0 1))
(macroexpand '(all-truthy? (= 1 2)))
(macroexpand '((all-truthy?
    (= false true))
)
(macroexpand '(all-truthy? (= 1 2)))))
(macroexpand '(all-truthy? (= 1 2)))
(all-truthy? (= 1 2))
(load-file "test/simple/macro1.clj")
(all-truthy? (= 1 2))
(macroexpand '(all-truthy? (= 1 2)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2)))
(all-truthy? (= 1 2))
(all-truthy? (= 1 1))
(all-truthy? (= 1 1) (= 1 2))
(all-truthy? (= 1 3) (= 1 2))
(all-truthy? (= 1 1) (= 1 2))
(all-truthy? (= 1 1))
(all-truthy? (= 1 2) (= 1 1))
(test-library-facts)
(macroexpand '(all-truthy? (= 1 2)))
(macroexpand '(all-truthy? (= 1 2) (= 2 3)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 3)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 3)))
(all-truthy? (= 1 2) (= 2 3))
(do (clojure.core/-> {:expression "p1__2081#", :value (= 1 2)} {:expression "p1__2081#", :value (= 2 3)}))
(do (-> {:expression "p1__2081#", :value (= 1 2)} {:expression "p1__2081#", :value (= 2 3)}))
(do (-> {:expression "p1__2081#", :value (= 1 2)}))
(-> {:expression "p1__2081#", :value (= 1 2)})
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 3)))
(all-truthy? (= 1 2) (= 2 3))
(load-file "test/simple/macro1.clj")
(all-truthy? (= 1 2) (= 2 3))
(macroexpand '(all-truthy? (= 1 2) (= 2 3)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 3)))
(all-truthy? (= 1 2) (= 2 3))
(load-file "test/simple/macro1.clj")
(all-truthy? (= 1 2) (= 2 3))
(macroexpand '(all-truthy? (= 1 2) (= 2 3)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 3)))
(load-file "test/simple/macro1.clj")
(all-truthy? (= 1 2) (= 2 3))
(load-file "test/simple/macro1.clj")
(all-truthy? (= 1 2) (= 2 3))
(load-file "test/simple/macro1.clj")
(all-truthy? (= 1 2) (= 2 3))
(macroexpand '(all-truthy? (= 1 2) (= 2 3)))
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(all-truthy? (= 1 2) (= 2 3))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(all-truthy? (= 1 2) (= 2 5))
(source macroexpand)
(source macroexpand-1)
(load-file "test/simple/macro1.clj")
(all-truthy? (= 1 2) (= 2 5))
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(all-truthy? (= 1 2) (= 2 5))
(load-file "test/simple/macro1.clj")
(all-truthy? (= 1 2) (= 2 5))
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(all-truthy? (= 1 2) (= 2 5))
(load-file "test/simple/macro1.clj")
(all-truthy? (= 1 2) (= 2 5))
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(all-truthy? (= 1 2) (= 2 5))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(all-truthy? (= 1 2) (= 2 5))
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(all-truthy? (= 1 2) (= 2 5))
(load-file "test/simple/macro1.clj")
(all-truthy? (= 1 2) (= 2 5))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(all-truthy? (= 1 2) (= 2 5))
(load-file "test/simple/macro1.clj")
(all-truthy? (= 1 2) (= 2 5))
(run-tests 'simple.steganography)
(use 'midje.repl)
(autotest)
*me
(use 'midje.repl)
(autotest)
(use 'midje.repl)
(autotest)
(rand-nth 34)
rand-nth
(source rand-nth)
(rand-int 10)
(take 40 (repeat #(rand-int 10)))
(take 40 (cycle #(rand-int 10)))
(take 40 (repeat (rand-int 10)))
(take 40 (repeat '(rand-int 10)))
(take 40 (cycle (defn [] (rand-int 10))))
(take 40 (cycle (fn [] (rand-int 10))))
(take 40 (repeat (fn [] (rand-int 10))))
(doall (take 40 (repeat (fn [] (rand-int 10)))))
(take 40 (repeat (fn [] (rand-int 10))))
(repeat (fn [] (rand-int 10)))
(fn [] (rand-int 10))
((fn [] (rand-int 10)))
(defn r [] (rand-int 10))
(take 40 (repeat r))
(map identity (take 40 (repeat r)))
(map eval (take 40 (repeat r)))
(map -> (take 40 (repeat r)))
(take 40 (repeat r))
(take 40 (repeatedly r))
(frequencies (take 40 (repeatedly r)))
(frequencies (take 40000 (repeatedly r)))
(frequencies (take 400000 (repeatedly r)))
(frequencies (take 4000000 (repeatedly r)))
(def s1 (frequencies (take 4000000 (repeatedly r))))
s1
(max (map second s1))
(apply max (map second s1))
(apply #(-> (max %) (min %)) (map second s1))
(-> [(apply max)] (map second s1))
(apply max (map second s1))
(apply min (map second s1))
(- 400957 398412)
(/ (- 400957 398412) 2545)
(/ (- 400957 398412) 2545M)
(/ (- 400957 398412) 4000000M)
(* 100 (/ (- 400957 398412) 4000000M))
(* 1000 (/ (- 400957 398412) 4000000M))
(* 10000 (/ (- 400957 398412) 4000000M))
(rand-int 0)
(rand-int -1)
(source comp)
(conceal-message "///")
(ns simple.steganography)
(conceal-message "///")
(let [line (read-line)]
  (->> line
  lower-case
  frequencies
  keys
  #(< 27 (count %))
  println))
(use '[clojure.string :only (split triml lower-case)])
  lower-case(let [line (read-line)]
  (->> line
  lower-case
  frequencies
  keys
  #(< 27 (count %))
  println))
(def line "aa rr ")
(->> line
  lower-case
  frequencies
  keys)
  (->> line
  lower-case
  frequencies
  keys
  count
  (< 27))
  (->> line
  lower-case
  frequencies
  keys
  count
  (<= 27)
  #(if % "pangram" "not pangram")
  println)
  (->> line
  lower-case
  frequencies
  keys
  count
  (<= 27)
  (fn [is] (if is "pangram" "not pangram"))
  println)
(->> line #(inc %))
(->> 3 #(inc %))
(->> 3 (inc))
(->> 3 inc)
(->> 3 #(if % 4 5))
(-> 3 #(if % 4 5))
(->> 3 (fn [a] a))
(->> 3 ((fn [a] a)))
(->> 3 (#(a))
)
(->> 3 (#(%))
)
(->> 3 (#(-> %)))
(->> 3 #(-> %))
  (->> line
  lower-case
  frequencies
  keys
  count
  (<= 27)
  ((fn [is] (if is "pangram" "not pangram")))
  println)
(def line "qwfpgjluyarstdhneiozxcvbkm")
(defn- is-pangram? [text]
  (->> text
  lower-case
  frequencies
  keys
  (#(dissoc % \space))
  count
  (<= 26)))
(is-pangram? line)
(defn- is-pangram? [text]
  (->> text
  lower-case
  frequencies
  (#(dissoc % \space)))
)
(is-pangram? line)
line
(def line "qwfpgjluyarstdhneiozxcvbkm   ")
(is-pangram? line)
(defn- is-pangram? [text]
  (->> text
  lower-case
  frequencies
  (#(dissoc % \space))
  keys
  count
  (<= 26)))
(is-pangram? line)
(def line "qwfjluyarstdhneiozxcvbkm   ")
(is-pangram? line)
(def str "acxz")
(def str '#clojure.core/str)
(def str 'clojure.core/str)
(str "a " 1)
(str "a " "1")
(str " "1")
(str " 1")
(def inp "acxz")
inp
(str 2 3)
(->> inp char)
(->> inp (map char))
(->> inp (map int))
(butlast inp)
(map vector inp (butlast inp))
(drop 1 inp)
(map vector inp (drop 1 inp))
(map (fn [[a b]] (- a b)) (list [\a \c] [\c \x] [\x \z]))
(->> inp
  (map int)
  (#(map vector % (drop 1 %)))
  (map (fn [[a b]] (- a b))))
(->> inp
  (map int)
  (#(map vector % (drop 1 %)))
  (map (fn [[a b]] (- a b)))
  (#(= % (reverse %))))
(read-int)
(read-line)
(def array-size 6)
(map Integer/parseInt (take array-size (clojure.string/split #" " (read-line))))
(take array-size (clojure.string/split #" " (read-line)))
(take array-size (clojure.string/split (read-line) #" "))
(def li (list "1" "2" "3" "4" "5" "6"))
(map Integer/parseInt li)
(def inp (list 1 2 3 4))
(map vector inp (drop 1 inp))
inp
(map Integer/parseInt li)
(map Integer/parseI li)
(map Integer/parseInt li)
(map #(Integer/parseInt %) li)
(def ints (list 1 2 3 4 5 6))
(java.util.Collections/binarySearch li 2)
(java.util.Collections/binarySearch ints 2)
