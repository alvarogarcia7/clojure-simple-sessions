(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(eva [:y] 1)
(eva [:y 2] 1)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(eva [:y] 1)
(number? 1)
(number? a)
(number? :a)
(number? "a")
(every number? ["a"])
(all number? ["a"])
(every? number? ["a"])
(every? number? [1 2 3])
(every? number? [1 2 3 :a])
(every? number? [1 2 3 :a 2])
(load-file "test/simple/polynomial.clj")
(facts)
(rest [0 1 2]
)
(load-file "test/simple/polynomial.clj")
(facts)
 (eva "0" 1)
(parse- "0" :x)
(load-file "test/simple/polynomial.clj")
(facts)
 (eva "0" 1)
(facts)
(load-file "test/simple/polynomial.clj")
 (eva "0" 1)
(facts)
(eva "x" 1)
(eva "y" 1)
(load-file "test/simple/polynomial.clj")
(facts)
(macroexpand '(when (pos? a) (println "positive") (/ b a)))
(macroexpand '(+ 1 2))
(eval (macroexpand '(+ 1 2)))
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(for [x [1 2 3]] x)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(merge {:a 1} {:c 2}}
(merge {:a 1} {:c 2})
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(:line :a)
(load-file "test/simple/polynomial.clj")
(facts)
(test-library-facts)
(->> [1 2 3] inc inc inc)
(def name "jb")
(load-file "test/simple/polynomial.clj")
(facts)
(->> 1 inc inc)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(source ->>)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(load-file "test/simple/polynomial.clj")
(facts)
(test-library-facts)
(source if-let)
(load-file "test/simple/polynomial.clj")
(exercise-macro)
(load-file "test/simple/polynomial.clj")
(exercise-macro)
(load-file "test/simple/polynomial.clj")
(code-critic (1 + 1) (+ 1 1))
(code-critic (1 + 1))
(code-critic (1 + 1) (1 + 1))
(load-file "test/simple/polynomial.clj")
(code-critic (1 + 1) (1 + 1))
(code-critic (1 + 1))
(code-critic {:good (+ 1 1) :bad (1 + 1)})
(load-file "test/simple/polynomial.clj")
(code-critic (+ 1 1) (1 + 1))
(load-file "test/simple/polynomial.clj")
(code-critic (+ 1 1) (1 + 1))
(load-file "test/simple/macro1.clj")
(code-critic (+ 1 1) (1 + 1))
(load-file "test/simple/macro1.clj")
(code-critic (+ 1 1) (1 + 1))
(load-file "test/simple/macro1.clj")
(code-critic (+ 1 1) (1 + 1))
(load-file "test/simple/macro1.clj")
(code-critic (+ 1 1) (1 + 1))
(load-file "test/simple/macro1.clj")
(code-critic (+ 1 1) (1 + 1))
(load-file "test/simple/macro1.clj")
(code-critic (+ 1 1) (1 + 1))
(load-file "test/simple/macro1.clj")
(code-critic (+ 1 1) (1 + 1))
(code-critic (+ 1 1) (* 1 3))
(load-file "test/simple/macro1.clj")
(code-critic (+ 1 1) (* 1 3))
(load-file "test/simple/macro1.clj")
(code-critic (+ 1 1) (* 1 3))
(load-file "test/simple/macro1.clj")
(code-critic (+ 1 1) (* 1 3))
(load-file "test/simple/macro1.clj")
(code-critic (+ 1 1) (* 1 3))
(load-file "test/simple/macro1.clj")
(code-critic (+ 1 1) (* 1 3))
(load-file "test/simple/macro1.clj")
(preval (+ 1 1) (* 1 3))
(load-file "test/simple/macro1.clj")
(preval (+ 1 1) (* 1 3))
(load-file "test/simple/macro1.clj")
(preval (+ 1 1) (* 1 3))
(load-file "test/simple/macro1.clj")
(preval (+ 1 1) (* 1 3))
(load-file "test/simple/macro1.clj")
(macroexpand [(+ 1 1)])
(macroexpand (+ 1 1))
(macroexpand (evaluate (+ 1 1)))
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
~@:a
~@
~@(+ 1)
~(+ 1)
`(+ 1)
'(+ 1)
`(+ 1)
~(`(+ 1))
~@(`(+ 1))
~@('(+ 1))
~('(+ 1))
~ '(+ 1)
'(+ 1)
~ '(+ 1)
(~'(+ 1))
(~ '(+ 1))
unquote
(unquote 1)
(unquote '1)
 ~(str 1 2 3)
`(~(str 1 2 3))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
g d
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(evaluate (+ 1 1))
(load-file "test/simple/macro1.clj")
(map evaluate [])
(map and [])
(load-file "test/simple/macro1.clj")
(test-library-facts)
(load-file "test/simple/macro1.clj")
(test-library-facts)
(load-file "test/simple/macro1.clj")
(test-library-facts)
(load-file "test/simple/macro1.clj")
(test-library-facts)
(load-file "test/simple/macro1.clj")
(test-library-facts)
(load-file "test/simple/macro1.clj")
(test-library-facts)
(load-file "test/simple/macro1.clj")
(macroexpand (all-truthy? (= 1 2)))
(load-file "test/simple/macro1.clj")
(macroexpand (all-truthy? (= 1 2)))
(macroexpand (and 0 1)))
(macroexpand (and 0 1))
(macroexpand '(and 0 1))
(macroexpand '(all-truthy? (= 1 2)))
(macroexpand '((all-truthy?
    (= false true))
)
(macroexpand '(all-truthy? (= 1 2)))))
(macroexpand '(all-truthy? (= 1 2)))
(all-truthy? (= 1 2))
(load-file "test/simple/macro1.clj")
(all-truthy? (= 1 2))
(macroexpand '(all-truthy? (= 1 2)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2)))
(all-truthy? (= 1 2))
(all-truthy? (= 1 1))
(all-truthy? (= 1 1) (= 1 2))
(all-truthy? (= 1 3) (= 1 2))
(all-truthy? (= 1 1) (= 1 2))
(all-truthy? (= 1 1))
(all-truthy? (= 1 2) (= 1 1))
(test-library-facts)
(macroexpand '(all-truthy? (= 1 2)))
(macroexpand '(all-truthy? (= 1 2) (= 2 3)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 3)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 3)))
(all-truthy? (= 1 2) (= 2 3))
(do (clojure.core/-> {:expression "p1__2081#", :value (= 1 2)} {:expression "p1__2081#", :value (= 2 3)}))
(do (-> {:expression "p1__2081#", :value (= 1 2)} {:expression "p1__2081#", :value (= 2 3)}))
(do (-> {:expression "p1__2081#", :value (= 1 2)}))
(-> {:expression "p1__2081#", :value (= 1 2)})
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 3)))
(all-truthy? (= 1 2) (= 2 3))
(load-file "test/simple/macro1.clj")
(all-truthy? (= 1 2) (= 2 3))
(macroexpand '(all-truthy? (= 1 2) (= 2 3)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 3)))
(all-truthy? (= 1 2) (= 2 3))
(load-file "test/simple/macro1.clj")
(all-truthy? (= 1 2) (= 2 3))
(macroexpand '(all-truthy? (= 1 2) (= 2 3)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 3)))
(load-file "test/simple/macro1.clj")
(all-truthy? (= 1 2) (= 2 3))
(load-file "test/simple/macro1.clj")
(all-truthy? (= 1 2) (= 2 3))
(load-file "test/simple/macro1.clj")
(all-truthy? (= 1 2) (= 2 3))
(macroexpand '(all-truthy? (= 1 2) (= 2 3)))
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(all-truthy? (= 1 2) (= 2 3))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(all-truthy? (= 1 2) (= 2 5))
(source macroexpand)
(source macroexpand-1)
(load-file "test/simple/macro1.clj")
(all-truthy? (= 1 2) (= 2 5))
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(all-truthy? (= 1 2) (= 2 5))
(load-file "test/simple/macro1.clj")
(all-truthy? (= 1 2) (= 2 5))
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(all-truthy? (= 1 2) (= 2 5))
(load-file "test/simple/macro1.clj")
(all-truthy? (= 1 2) (= 2 5))
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(all-truthy? (= 1 2) (= 2 5))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(all-truthy? (= 1 2) (= 2 5))
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(all-truthy? (= 1 2) (= 2 5))
(load-file "test/simple/macro1.clj")
(all-truthy? (= 1 2) (= 2 5))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(load-file "test/simple/macro1.clj")
(macroexpand '(all-truthy? (= 1 2) (= 2 5)))
(all-truthy? (= 1 2) (= 2 5))
(load-file "test/simple/macro1.clj")
(all-truthy? (= 1 2) (= 2 5))
(run-tests 'simple.steganography)
(use 'midje.repl)
(autotest)
*me
(use 'midje.repl)
(autotest)
(use 'midje.repl)
(autotest)
(rand-nth 34)
rand-nth
(source rand-nth)
(rand-int 10)
(take 40 (repeat #(rand-int 10)))
(take 40 (cycle #(rand-int 10)))
(take 40 (repeat (rand-int 10)))
(take 40 (repeat '(rand-int 10)))
(take 40 (cycle (defn [] (rand-int 10))))
(take 40 (cycle (fn [] (rand-int 10))))
(take 40 (repeat (fn [] (rand-int 10))))
(doall (take 40 (repeat (fn [] (rand-int 10)))))
(take 40 (repeat (fn [] (rand-int 10))))
(repeat (fn [] (rand-int 10)))
(fn [] (rand-int 10))
((fn [] (rand-int 10)))
(defn r [] (rand-int 10))
(take 40 (repeat r))
(map identity (take 40 (repeat r)))
(map eval (take 40 (repeat r)))
(map -> (take 40 (repeat r)))
(take 40 (repeat r))
(take 40 (repeatedly r))
(frequencies (take 40 (repeatedly r)))
(frequencies (take 40000 (repeatedly r)))
(frequencies (take 400000 (repeatedly r)))
(frequencies (take 4000000 (repeatedly r)))
(def s1 (frequencies (take 4000000 (repeatedly r))))
s1
(max (map second s1))
(apply max (map second s1))
(apply #(-> (max %) (min %)) (map second s1))
(-> [(apply max)] (map second s1))
(apply max (map second s1))
(apply min (map second s1))
(- 400957 398412)
(/ (- 400957 398412) 2545)
(/ (- 400957 398412) 2545M)
(/ (- 400957 398412) 4000000M)
(* 100 (/ (- 400957 398412) 4000000M))
(* 1000 (/ (- 400957 398412) 4000000M))
(* 10000 (/ (- 400957 398412) 4000000M))
(rand-int 0)
(rand-int -1)
(source comp)
